(()=>{"use strict";const t=(()=>{class t{constructor(t){this.title=t,this.tasks=[]}}let e=[];return{projectList:e,addProject:function(o){const s=new t(o);e.push(s)},getProjectIndex:function(t){return e.map((t=>t.title)).indexOf(t)},deleteProject:function(t){e.splice(t,1)},editProject:function(t,o,s){e[t][o]=s}}})(),e=(()=>{class e{constructor(t,e,o,s,c){this.title=t,this.description=e,this.dueDate=o,this.priority=s,this.completed=c}}return{addTodo:function(o,s,c,n,i){const r=new e(o,s,c,n,i);t.projectList[t.getProjectIndex("Test project")].tasks.push(r)},deleteTodo:function(e,o){t.projectList[e].tasks.splice(o,1)},getTaskIndex:function(e){return t.projectList[t.getProjectIndex("Test project")].tasks.map((t=>t.title)).indexOf(e)},editTodo:function(e,o,s,c){t.projectList[e].tasks[o][s]=c}}})();t.addProject("Test project"),console.log(t.projectList),e.addTodo("test","test description",new Date,"important",!1),e.addTodo("test2","another test description",new Date,"not important",!1),console.log(t.projectList),e.deleteTodo(t.getProjectIndex("Test project"),e.getTaskIndex("test")),console.log(t.projectList),e.editTodo(t.getProjectIndex("Test project"),e.getTaskIndex("test2"),"completed",!0),console.log(t.projectList)})();